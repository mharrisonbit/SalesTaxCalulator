using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SalesTaxCalculator.Models;
//
//    var orderTaxes = OrderTaxes.FromJson(jsonString);

namespace SalesTaxCalculator.Models
{

    public partial class OrderTaxes
    {
        [JsonProperty("tax")]
        public Tax Tax { get; set; }
    }

    public partial class Tax
    {
        [JsonProperty("amount_to_collect")]
        public long AmountToCollect { get; set; }

        [JsonProperty("freight_taxable")]
        public bool FreightTaxable { get; set; }

        [JsonProperty("has_nexus")]
        public bool HasNexus { get; set; }

        [JsonProperty("order_total_amount")]
        public double OrderTotalAmount { get; set; }

        [JsonProperty("rate")]
        public long Rate { get; set; }

        [JsonProperty("shipping")]
        public long Shipping { get; set; }

        [JsonProperty("tax_source")]
        public object TaxSource { get; set; }

        [JsonProperty("taxable_amount")]
        public long TaxableAmount { get; set; }
    }

    public partial class OrderTaxes
    {
        public static OrderTaxes FromJson(string json) => JsonConvert.DeserializeObject<OrderTaxes>(json, SalesTaxCalculator.Models.Converter.OrderTaxesSettings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrderTaxes self) => JsonConvert.SerializeObject(self, SalesTaxCalculator.Models.Converter.OrderTaxesSettings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings OrderTaxesSettings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
